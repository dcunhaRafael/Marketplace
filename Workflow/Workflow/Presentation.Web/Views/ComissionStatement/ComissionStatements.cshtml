@model Portal.Web.Models.ComissionStatement.ComissionStatementViewModel;
@using Domain.Util.Extensions;
@using Domain.Enumerators;
@{
    ViewBag.Title = "Extrato de Comissão";
}
<div class="container-fluid screen-taker-appeal-table__query ComissionStatementSearch">
    <div class="row mb-4 PageBlock ComissionStatementFilter header__title__with__buttom">
        <div class="col-12 header__text">
            <p class="title"><span>Extrato de Comissão</span></p>
            <p class="subtitle PageBlock ComissionStatementFilter">Use os filtros para guiar uma consulta avançada</p>
        </div>
    </div>
    <form id="formComissionStatement" autocomplete="off" AutoCompleteType="Disabled">
        @Html.AntiForgeryToken()
        <div class="row mb-4 PageBlock ComissionStatementFilter container__form">
            <div class="col-md-6 form-group">
                <label>Corretor</label>
                <div class="input-group">
                    <input type="text" class="form-control mat-input-element mat-form-field-autofill-control search-input BrokerFilter"
                           placeholder="Informe o nome/razão social do corretor" name="BrokerName">
                    <input type="hidden" class="BrokerData BrokerName search-input" value="" name="@Html.NameFor(x=> x.Broker.Name)" />
                    <input type="hidden" class="BrokerData BrokerCpfCnpjNumber search-input" value="" name="@Html.NameFor(x=> x.Broker.CpfCnpjNumber)" />
                    <input type="hidden" class="BrokerData BrokerLegacyCode search-input" required value="" name="@Html.NameFor(x=> x.Broker.LegacyCode)" />
                    <input type="hidden" class="BrokerData BrokerUserId search-input" value="" name="@Html.NameFor(x=> x.Broker.LegacyUserId)" />
                    <input type="hidden" class="BrokerData BrokerSusepCode search-input" value="" name="@Html.NameFor(x=> x.Broker.SusepCode)" />
                    <div class="input-group-append">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                    </div>
                </div>
            </div>

            <div class="col-md-3 form-group">
                <label>Extrato</label>
                <input type="text" class="form-control mat-input-element mat-form-field-autofill-control mask-number search-input" maxlength="9"
                       name="@Html.NameFor(x=> x.StatementNumber)">
            </div>

            <div class="col-md-3 form-group">
                <label>Situação</label>
                <select name="@Html.NameFor(x=> x.StatusId)" class="form-control mat-input-element mat-form-field-autofill-control search-input">
                    <option value="">Todas</option>
                    @foreach (var item in Model.Status) {
                        <option value="@item.LegacyCode">@item.Name</option>
                    }
                </select>
            </div>

            <div class="col-md-3 form-group">
                <label class="label-default">Período de busca</label>
                <select class="form-control mat-input-element mat-form-field-autofill-control search-input required"
                        name="@Html.NameFor(x=> x.SearchPeriodId)" id="SearchPeriodId"
                        onchange="ComissionStatement.searchPeriodChange(this.value);">
                    @foreach (var item in EnumExtensions.ToList<SearchRangeEnum>()) {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </div>

            <div class="col-md-3 form-group SearchPeriodId SpecificPeriod" style="display: none">
                <label>A partir de</label>
                <div class="input-group">
                    <input type="text" class="form-control mat-input-element mat-form-field-autofill-control mask-date search-input FromDate"
                           name="@Html.NameFor(x=> x.FromDate)" id="FromDate">
                    <div class="input-group-append">
                        <span class="input-group-text"><i class="fas fa-calendar-alt" onclick="$('.FromDate').focus();"></i></span>
                    </div>
                </div>
            </div>

            <div class="col-md-3 form-group SearchPeriodId SpecificPeriod" style="display: none">
                <label>Até</label>
                <div class="input-group">
                    <input type="text" class="form-control mat-input-element mat-form-field-autofill-control mask-date search-input ToDate"
                           name="@Html.NameFor(x=> x.ToDate)" id="ToDate">
                    <div class="input-group-append">
                        <span class="input-group-text"><i class="fas fa-calendar-alt" onclick="$('.ToDate').focus();"></i></span>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-3 form-group SearchPeriodId SpecificYearMonth" style="display: none">
                <label class="label-default">Ano</label>
                <select class="form-control mat-input-element mat-form-field-autofill-control search-input" name="@Html.NameFor(x=> x.YearNumber)" id="YearNumber">
                    <option value="">Selecione</option>
                    @foreach (var item in Model.Years) {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </div>

            <div class="col-md-3 form-group SearchPeriodId SpecificYearMonth" style="display: none">
                <label class="label-default">Mês</label>
                <select class="form-control mat-input-element mat-form-field-autofill-control search-input" name="@Html.NameFor(x=> x.MonthNumber)" id="MonthNumber">
                    <option value="">Todos</option>
                    @foreach (var item in Model.Months) {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </div>

            <div class="col-12">
                <button type="button" class="btn mat-focus-indicator button mat-raised-button mat-button-base" onclick="ComissionStatement.search()">PESQUISAR</button>
                <button type="button" class="btn mat-focus-indicator button__white mat-raised-button mat-button-base" onclick="ComissionStatement.clear()">LIMPAR BUSCA</button>
            </div>
        </div>
    </form>

    <div class="row PageBlock ComissionStatementResult" style="display: none;">
        <div class="col-12 header__title mb-3">
            <p class="title__semibold__orange">Resultado</p>
            <p class="subtitle"></p>
        </div>
        <div class="col-12">
            <div class="row" id="ComissionStatementGridContainer">
                @{await Html.RenderPartialAsync("~/Views/ComissionStatement/ComissionStatementGrid.cshtml", Model);}
            </div>
        </div>
    </div>

    <div class="row PageBlock ComissionStatementCover" style="display: none;">
        <div class="col-12 header__title mb-3">
            <p class="title__semibold__orange">Capa do Extrato de Comissão</p>
            <p class="subtitle"></p>
        </div>
        <div class="col-12">
            <div class="row" id="ComissionStatementCoverContainer"></div>
        </div>
    </div>

    <div class="row PageBlock ComissionStatementEntries" style="display: none;">
        <div class="col-12 header__title mb-3">
            <p class="title__semibold__orange">Lançamentos do Extrato de Comissão</p>
            <p class="subtitle"></p>
        </div>
        <div class="col-12">
            <div class="row" id="ComissionStatementEntriesContainer"></div>
        </div>
    </div>
</div>
<script src="~/js/AutoCompleteFilters.js?version=@DateTime.Now.Ticks"></script>
<script>
    $(document).ready(function () {
        format.initializeInputMasks('#formComissionStatement');
        rangeUtil.initializeDate('#FromDate', '#ToDate');
        validationrules.init('#formComissionStatement');
        ComissionStatement.clear();

        AutoCompleteFilters.brokerInit('.BrokerFilter', '#formComissionStatement',
            function (data) {
                $('.BrokerData.BrokerName').val(data.name);
                $('.BrokerData.BrokerCpfCnpjNumber').val(data.cpfCnpjNumber);
                $('.BrokerData.BrokerLegacyCode').val(data.legacyCode);
                $('.BrokerData.BrokerUserId').val(data.legacyUserId);
                $('.BrokerData.BrokerSusepCode').val(data.susepCode);
            },
            function () {
                $('.BrokerData').val('');
            }
        );
    });

    var ComissionStatement = {

        searchPeriodChange: function (value) {
            $('.SearchPeriodId').hide();

            validationrules.removeRule('#FromDate', 'required')
            validationrules.removeRule('#ToDate', 'required')
            validationrules.removeRule('#YearNumber', 'required')
            //validationrules.removeRule('#MonthNumber', 'required')

            if (value == '@((int)SearchRangeEnum.SpecificPeriod)') {
                $('.SpecificPeriod').show();
                validationrules.addRule('#FromDate', 'required')
                validationrules.addRule('#ToDate', 'required')
            }
            if (value == '@((int)SearchRangeEnum.SpecificYearMonth)') {
                $('.SpecificYearMonth').show();
                validationrules.addRule('#YearNumber', 'required')
            }
        },

        search: function () {
            commons.postAndCallback('#formComissionStatement', true, function (formValues) {
                $.ajax({
                    type: 'POST',
                    url: '/ComissionStatement/ComissionStatementGrid',
                    data: formValues,
                    dataType: 'html',
                    beforeSend: function () {
                        loading.show("Processando... por favor, aguarde...");
                    },
                    success: function (data) {
                        loading.hide();
                        $('#ComissionStatementGridContainer').html(data);
                        $('.ComissionStatementResult').show();
                        commons.scrollToElement('#ComissionStatementGridContainer');
                    },
                    error: function (xhr) {
                        loading.hide();
                        messages.ajaxError(xhr);
                    }
                });
            });
        },

        clear: function () {
            $('.search-input').val('');
            $('#SearchPeriodId').val('@((int)SearchRangeEnum.Last30Days)');
            $('#YearNumber').val('@(DateTime.Now.Year)');
            ComissionStatement.searchPeriodChange('@((int)SearchRangeEnum.Last30Days)');
            $('.ComissionStatementResult').hide();
            commons.scrollToElement('.ComissionStatementSearch');
        },

        back: function () {
            ComissionStatement.clear();
            $('.PageBlock').hide();
            $('.ComissionStatementFilter').show();
        },

        openStatementCover: function (statementNumber, competency) {
            $('.SelectedStatement.StatementNumber').val(statementNumber);
            $('.SelectedStatement.Competency').val(competency);
            commons.postAndCallback('#formSelectedStatement', false, function (formData) {
                $.ajax({
                    type: 'POST',
                    url: '/ComissionStatement/ComissionStatementCover',
                    data: formData,
                    dataType: 'html',
                    beforeSend: function () {
                        loading.show("Processando... por favor, aguarde...");
                    },
                    success: function (data) {
                        loading.hide();
                        $('#ComissionStatementCoverContainer').html(data);
                        $('.PageBlock').hide();
                        $('.ComissionStatementCover').show();
                        commons.scrollToElement('#ComissionStatementCoverContainer');
                    },
                    error: function (xhr) {
                        loading.hide();
                        messages.ajaxError(xhr);
                    }
                });
            });
        },

        openStatementEntries: function (statementNumber, competency) {
            $('.SelectedStatement.StatementNumber').val(statementNumber);
            $('.SelectedStatement.Competency').val(competency);
            commons.postAndCallback('#formSelectedStatement', false, function (formData) {
                $.ajax({
                    type: 'POST',
                    url: '/ComissionStatement/ComissionStatementEntries',
                    data: formData,
                    dataType: 'html',
                    beforeSend: function () {
                        loading.show("Processando... por favor, aguarde...");
                    },
                    success: function (data) {
                        loading.hide();
                        $('#ComissionStatementEntriesContainer').html(data);
                        $('.PageBlock').hide();
                        $('.ComissionStatementEntries').show();
                        commons.scrollToElement('#ComissionStatementEntriesContainer');
                    },
                    error: function (xhr) {
                        loading.hide();
                        messages.ajaxError(xhr);
                    }
                });
            });
        },

        backResults: function () {
            $('.PageBlock').hide();
            $('.ComissionStatementFilter').show();
            $('.ComissionStatementResult').show();
            commons.scrollToElement('#ComissionStatementGridContainer');
        },

    };

</script>
