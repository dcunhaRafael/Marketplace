@model Presentation.Web.Models.Configuration.OccurrencesViewModel
@using Domain.Enumerators;
@using Domain.Util.Extensions;
@{
    ViewBag.Title = "Index";
}
<div class="container-fluid screen-taker-appeal-table__query OccurrenceSearch">
    <div class="row mb-4 header__title__with__buttom">
        <div class="col-9 header__text">
            <p class="title">Cadastro de <span>Ocorrências</span></p>
            <p class="subtitle">Use os filtros para guiar uma consulta avançada</p>
        </div>
        <div class="col-3 text-right header__button">
            <button type="button" class="btn mat-focus-indicator button mat-button mat-button-base ng-star-inserted" onclick="Occurrences.new()"><i class="fas fa-plus"></i>&nbsp;NOVO CADASTRO</button>
        </div>
    </div>
    <form id="formFilters" autocomplete="off" AutoCompleteType="Disabled">
        @Html.AntiForgeryToken()
        <div class="row mb-4 OccurrencesFilter container__form">
            <div class="col-md-6 form-group">
                <label>Produto</label>
                <select name="@Html.NameFor(x=> x.Filters.ProductId)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter"
                        onchange="Occurrences.loadCoverages(this.value, '#formFilters .CoverageId', 'Todas');">
                    <option value="">Todos</option>
                    @foreach (var item in Model.ProductList) {
                        <option value="@item.ProductId">@item.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-6 form-group">
                <label>Cobertura</label>
                <select name="@Html.NameFor(x=> x.Filters.CoverageId)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter CoverageId">
                    <option value="">Todas</option>
                </select>
            </div>

            <div class="col-md-3 form-group">
                <label>Código</label>
                <input type="text" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter" placeholder="" maxlength="50"
                       name="@Html.NameFor(x=> x.Filters.OccurrenceCode)">
            </div>
            <div class="col-md-3 form-group">
                <label>Nome</label>
                <input type="text" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter" placeholder="" maxlength="100"
                       name="@Html.NameFor(x=> x.Filters.Name)">
            </div>

            <div class="col-md-6 form-group">
                <label>Descrição</label>
                <input type="text" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter" placeholder="" maxlength="1000"
                       name="@Html.NameFor(x=> x.Filters.Description)">
            </div>

            <div class="col-md-3 form-group">
                <label>Tipo</label>
                <select name="@Html.NameFor(x=> x.Filters.Type)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter"
                        onchange="Ocorrencia.tipoChange('.FiltroRegra', this.options[this.selectedIndex].innerHTML, '');">
                    <option value="">Todos</option>
                    @foreach (var item in EnumExtensions.ToList<OccurrenceTypeEnum>()) {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </div>

            <div class="col-md-6 form-group">
                <label>Regra de validação</label>
                <select name="@Html.NameFor(x=> x.Filters.ValidationRule)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter ValidationRule">
                    <option value="">Todas</option>
                    @foreach (var item in EnumExtensions.ToList<ValidationRuleEnum>()) {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </div>

            <div class="col-md-3 form-group">
                <label>Bloqueio de transmissão</label>
                <select name="@Html.NameFor(x=> x.Filters.IsTransmissionLocked)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter">
                    <option value="">Todos</option>
                    <option value="true">Sim</option>
                    <option value="false">Não</option>
                </select>
            </div>
            <div class="col-md-3 form-group">
                <label>Bloqueio de emissão</label>
                <select name="@Html.NameFor(x=> x.Filters.IsIssuanceLocked)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter">
                    <option value="">Todos</option>
                    <option value="true">Sim</option>
                    <option value="false">Não</option>
                </select>
            </div>

            <div class="col-md-3 form-group">
                <label>Ação requerida</label>
                <select name="@Html.NameFor(x=> x.Filters.RequiredAction)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter">
                    <option value="">Todos</option>
                    @foreach (var item in EnumExtensions.ToList<RequiredActionEnum>()) {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </div>
            <div class="col-md-3 form-group">
                <label>Recusa automática</label>
                <select name="@Html.NameFor(x=> x.Filters.AutomaticRefusal)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter">
                    <option value="">Todos</option>
                    <option value="true">Sim</option>
                    <option value="false">Não</option>
                </select>
            </div>
            <div class="col-md-3 form-group">
                <label>Perfil de liberação</label>
                <select name="@Html.NameFor(x=> x.Filters.ProfileId)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter"
                        onchange="Occurrences.loadLiberationUsers(this.value);">
                    <option value="">Todos</option>
                    @foreach (var item in Model.ProfileList) {
                        <option value="@item.ProfileId">@item.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-3 form-group">
                <label>Status</label>
                <select name="@Html.NameFor(x=> x.Filters.Status)" class="form-control mat-input-element mat-form-field-autofill-control SearchFilter">
                    <option value="">Todos</option>
                    @foreach (var item in EnumExtensions.ToList<RecordStatusEnum>()) {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </div>

            <div class="col-12">
                <button type="button" class="btn mat-focus-indicator button mat-raised-button mat-button-base" onclick="Occurrences.search()">PESQUISAR</button>
                <button type="button" class="btn mat-focus-indicator button__white mat-raised-button mat-button-base" onclick="Occurrences.clear()">LIMPAR BUSCA</button>
            </div>
        </div>
    </form>
    <div class="row OccurrencesResult" style="display: none;">
        <div class="col-12 header__title mb-3">
            <p class="title__semibold__orange">Resultado</p>
            <p class="subtitle"></p>
        </div>
        <div class="col-12">
            <div class="data__table" id="OccurrencesGridContainer">
                @{await Html.RenderPartialAsync("~/Views/Configuration/Occurrences/OccurrencesGrid.cshtml", Model);}
            </div>
        </div>
    </div>
</div>
<div class="container-fluid screen-taker-appeal-table__query OccurrenceData" style="display: none;">
    <div class="row mb-4 header__title__with__buttom">
        <div class="col-12 header__text">
            <p class="title">Cadastrar <span>Ocorrência</span></p>
            <p class="subtitle">Cadastre abaixo a ocorrência</p>
        </div>
    </div>
    <form id="formData" autocomplete="off" AutoCompleteType="Disabled">
        @Html.AntiForgeryToken()
        <div class="row mb-4 container__form" id="OccurrenceDataContainer">
            @{await Html.RenderPartialAsync("~/Views/Configuration/Occurrences/OccurrenceData.cshtml", Model);}
        </div>
    </form>
</div>
<div id="OccurrenceCopyModalContainer"></div>
<script>
    $(document).ready(function () {
        format.initializeInputMasks('#formFilters');
        validationrules.init('#formFilters');
        Occurrences.clear();
    });

    var Occurrences = {

        loadCoverages: function (productId, coverageInputSelector, coverageUnselectedLabel) {
            var $coverageInputSelector = $(coverageInputSelector);
            $coverageInputSelector.empty();
            $coverageInputSelector.append($("<option></option>").attr("value", "").text(coverageUnselectedLabel));
            if (productId != '') {
                $.ajax({
                    type: 'GET',
                    url: '/Common/ListCoverages',
                    data: {
                        "productId": productId
                    },
                    dataType: 'json',
                    beforeSend: function () {
                        loading.show("Processando... por favor, aguarde...");
                    },
                    success: function (data) {
                        loading.hide();
                        $.each(data.coverages, function (key, value) {
                            $coverageInputSelector.append($("<option></option>").attr("value", value.coverageId).text(value.name));
                        });
                    },
                    error: function (xhr) {
                        loading.hide();
                        messages.ajaxError(xhr);
                    }
                });
            }
        },

        loadLiberationUsers: function (profileId) {
            $.ajax({
                type: 'POST',
                url: '/Configuration/OccurrenceLiberationUser',
                data: {
                    'profileId': profileId
                },
                dataType: 'html',
                beforeSend: function () {
                    loading.show("Processando... por favor, aguarde...");
                },
                success: function (data) {
                    loading.hide();
                    $('#OccurrenceLiberationUserContainer').html(data);
                },
                error: function (xhr) {
                    loading.hide();
                    messages.ajaxError(xhr);
                }
            });
        },

        search: function () {
            commons.postAndCallback('#formFilters', true, function (formValues) {
                $.ajax({
                    type: 'POST',
                    url: '/Configuration/OccurrencesGrid',
                    data: formValues,
                    dataType: 'html',
                    beforeSend: function () {
                        loading.show("Processando... por favor, aguarde...");
                    },
                    success: function (data) {
                        loading.hide();
                        $('#OccurrencesGridContainer').html(data);
                        $('.OccurrencesResult').show();
                        commons.scrollToElement('#OccurrencesGridContainer');
                    },
                    error: function (xhr) {
                        loading.hide();
                        messages.ajaxError(xhr);
                    }
                });
            });
        },

        clear: function () {
            $('.SearchFilter').val('');
            $('.OccurrencesResult').hide();
        },

        new: function () {
            $.ajax({
                type: 'POST',
                url: '/Configuration/OccurrenceData',
                data: {
                    'id': null,
                    'editable': true
                },
                dataType: 'html',
                beforeSend: function () {
                    loading.show("Processando... por favor, aguarde...");
                },
                success: function (data) {
                    loading.hide();
                    $('#OccurrenceDataContainer').html(data);
                    $('.OccurrenceSearch').hide();
                    $('.OccurrenceData').show();
                    commons.scrollToElement('#OccurrenceDataContainer');
                },
                error: function (xhr) {
                    loading.hide();
                    messages.ajaxError(xhr);
                }
            });
        },

        view: function (id) {
            $.ajax({
                type: 'POST',
                url: '/Configuration/OccurrenceData',
                data: {
                    'id': id,
                    'editable': false
                },
                dataType: 'html',
                beforeSend: function () {
                    loading.show("Processando... por favor, aguarde...");
                },
                success: function (data) {
                    loading.hide();
                    $('#OccurrenceDataContainer').html(data);
                    $('.OccurrenceSearch').hide();
                    $('.OccurrenceData').show();
                    commons.scrollToElement('#OccurrenceDataContainer');
                },
                error: function (xhr) {
                    loading.hide();
                    messages.ajaxError(xhr);
                }
            });
        },

        edit: function (id) {
            $.ajax({
                type: 'POST',
                url: '/Configuration/OccurrenceData',
                data: {
                    'id': id,
                    'editable': true
                },
                dataType: 'html',
                beforeSend: function () {
                    loading.show("Processando... por favor, aguarde...");
                },
                success: function (data) {
                    loading.hide();
                    $('#OccurrenceDataContainer').html(data);
                    $('.OccurrenceSearch').hide();
                    $('.OccurrenceData').show();
                    commons.scrollToElement('#OccurrenceDataContainer');
                },
                error: function (xhr) {
                    loading.hide();
                    messages.ajaxError(xhr);
                }
            });
        },

        save: function () {
            commons.postAndCallback('#formData', true, function (formValues) {
                $.ajax({
                    type: 'POST',
                    url: '/Configuration/OccurrenceSave',
                    data: formValues,
                    dataType: 'json',
                    beforeSend: function () {
                        loading.show("Processando... por favor, aguarde...");
                    },
                    success: function (data) {
                        loading.hide();
                        messages.info('Sucesso', 'Dados salvos com sucesso.');
                        $('#OccurrenceId').val(data.response.id);
                    },
                    error: function (xhr) {
                        loading.hide();
                        messages.ajaxError(xhr);
                    }
                });
            });
        },

        openCopy: function () {
            $.ajax({
                type: 'POST',
                url: '/Configuration/OccurrenceCopyModal',
                data: {
                    'id': $('#OccurrenceId').val()
                },
                dataType: 'html',
                beforeSend: function () {
                    loading.show("Processando... por favor, aguarde...");
                },
                success: function (data) {
                    loading.hide();
                    $('#OccurrenceCopyModalContainer').html(data);
                    $('#OccurrenceCopyModal').modal();
                },
                error: function (xhr) {
                    loading.hide();
                    messages.ajaxError(xhr);
                }
            });
        },

        copy: function () {
            commons.postAndCallback('#formOccurrenceCopy', true, function (formValues) {
                $.ajax({
                    type: 'POST',
                    url: '/Configuration/OccurrenceCopy',
                    data: formValues,
                    dataType: 'json',
                    beforeSend: function () {
                        loading.show("Processando... por favor, aguarde...");
                    },
                    success: function (data) {
                        loading.hide();
                        messages.info('Sucesso', 'Ocorrência copiada com sucesso.');
                    },
                    error: function (xhr) {
                        loading.hide();
                        messages.ajaxError(xhr);
                    }
                });
            });
        },

        delete: function (id) {
            messages.confirm('Confirmação', 'Confirma a exclusão da ocorrência?',
                function () {
                    $.ajax({
                        type: 'POST',
                        url: '/Configuration/OccurrenceDelete',
                        data: {
                            'id': id
                        },
                        dataType: 'json',
                        beforeSend: function () {
                            loading.show("Processando... por favor, aguarde...");
                        },
                        success: function (data) {
                            loading.hide();
                            messages.info('Sucesso', 'Ocorrência excluída com sucesso!', function () { Occurrences.search(); });
                            commons.scrollToElement('#OccurrencesGridContainer');
                        },
                        error: function (xhr) {
                            loading.hide();
                            messages.ajaxError(xhr);
                        }
                    });
                });
        },

        back: function () {
            $('.OccurrenceData').hide();
            $('.OccurrenceSearch').show();
        },

    };

</script>
